export declare const useContentState: <G extends object = Record<string, unknown>>() => {
    pages: import("#imports").Ref<Record<string, ParsedContent>>;
    surrounds: import("#imports").Ref<Record<string, [Omit<ParsedContent, "body"> | null, Omit<ParsedContent, "body"> | null]>>;
    navigation: import("#imports").Ref<NavItem[]>;
    globals: import("#imports").Ref<Record<string, G>>;
};
export declare const useContent: <T extends ParsedContent, G extends object = Record<string, unknown>>() => {
    globals: import("#imports").Ref<Record<string, G>>;
    navigation: import("#imports").Ref<NavItem[]>;
    surround: import("#imports").ComputedRef<[Omit<ParsedContent, "body"> | null, Omit<ParsedContent, "body"> | null] | undefined>;
    page: import("#imports").ComputedRef<T>;
    excerpt: import("#imports").ComputedRef<any>;
    toc: import("#imports").ComputedRef<any>;
    type: import("#imports").ComputedRef<any>;
    layout: import("#imports").ComputedRef<any>;
    next: import("#imports").ComputedRef<Omit<ParsedContent, "body"> | null | undefined>;
    prev: import("#imports").ComputedRef<Omit<ParsedContent, "body"> | null | undefined>;
};
